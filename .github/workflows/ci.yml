name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests weekly to catch dependency issues
    - cron: '0 6 * * 1'

env:
  PYTHON_DEFAULT_VERSION: "3.11"

jobs:
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
        cache: 'pip'

    - name: Install Graphviz
      run: sudo apt-get update && sudo apt-get install -y graphviz

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,docs,tools]"

    - name: Generate code atlas
      run: |
        python tools/extract_schema.py
        python tools/render_graphs.py

    - name: Run pre-commit hooks
      run: pre-commit run --all-files

    - name: Type checking with mypy
      run: mypy src/

    - name: Security scan with bandit
      run: bandit -r src/ -f json -o bandit-report.json

    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-results
        path: bandit-report.json

  test:
    name: Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12"]
        exclude:
          # Reduce matrix size for faster CI
          - os: windows-latest
            python-version: "3.9"
          - os: macos-latest
            python-version: "3.9"

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v6
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Run unit tests
      run: pytest tests/unit/ -v --tb=short

    - name: Run integration tests
      run: pytest tests/integration/ -v --tb=short

    - name: Run full test suite with coverage
      run: pytest --cov=src/yourpkg --cov-report=xml --cov-report=term-missing --cov-fail-under=80

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == env.PYTHON_DEFAULT_VERSION
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    needs: [quality, test]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
        cache: 'pip'

    - name: Install Graphviz
      run: sudo apt-get update && sudo apt-get install -y graphviz

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[docs,tools]"

    - name: Generate code atlas
      run: |
        python tools/extract_schema.py
        python tools/render_graphs.py --repo-url https://github.com/${{ github.repository }}/blob/main

    - name: Build documentation
      run: mkdocs build --strict

    - name: Upload documentation artifacts
      uses: actions/upload-artifact@v4
      with:
        name: documentation
        path: site/

    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./site

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: ${{ env.PYTHON_DEFAULT_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit

    - name: Check for known security vulnerabilities
      run: safety check --json --output safety-report.json || true

    - name: Upload safety scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: safety-scan-results
        path: safety-report.json

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [quality, test, docs]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: ${{ env.PYTHON_DEFAULT_VERSION }}

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: python -m build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: package-dist
        path: dist/

    # Uncomment when ready to publish to PyPI
    # - name: Publish to PyPI
    #   if: startsWith(github.ref, 'refs/tags/')
    #   env:
    #     TWINE_USERNAME: __token__
    #     TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
    #   run: twine upload dist/*
