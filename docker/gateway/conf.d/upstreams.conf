# Upstream service definitions with load balancing and health checks

# API service upstream
upstream api_upstream {
    least_conn;
    server api:8000 max_fails=3 fail_timeout=30s;
    # Additional API instances can be added here dynamically
    keepalive 32;
    keepalive_requests 100;
    keepalive_timeout 60s;
}

# Frontend service upstream
upstream frontend_upstream {
    server frontend:3000 max_fails=3 fail_timeout=30s;
    keepalive 16;
}

# Storage service upstream
upstream storage_upstream {
    server storage:8080 max_fails=3 fail_timeout=30s;
    keepalive 16;
}

# Worker service upstream (for monitoring/management)
upstream worker_upstream {
    server worker:8001 max_fails=3 fail_timeout=30s backup;
    keepalive 8;
}

# Task services upstream (dynamic - will be populated by service discovery)
upstream task_services_upstream {
    # Dynamic task service instances will be added here
    # via Lua scripts based on service registry
    server 127.0.0.1:65535 down; # Placeholder
    keepalive 16;
}

# Health check upstream for internal monitoring
upstream health_check_upstream {
    server api:8000;
    server storage:8080;
    keepalive 4;
}
