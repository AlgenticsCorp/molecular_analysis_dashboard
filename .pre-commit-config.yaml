repos:
  # Python Code formatting
  - repo: https://github.com/psf/black
    rev: 24.8.0
    hooks:
      - id: black
        language_version: python3
        files: ^src/.*\.py$

  - repo: https://github.com/pycqa/isort
    rev: 5.13.2
    hooks:
      - id: isort
        args: ["--profile", "black"]
        files: ^src/.*\.py$

  # Python Linting and style
  - repo: https://github.com/pycqa/flake8
    rev: 7.1.0
    hooks:
      - id: flake8
        additional_dependencies:
          - flake8-docstrings==1.7.0
          - flake8-bugbear==24.4.26
          - flake8-comprehensions==3.15.0
          - flake8-simplify==0.21.0
        args: ["--config", ".flake8"]
        exclude: "^tools/"
        files: ^src/.*\.py$

  # Python Docstring checking
  - repo: https://github.com/pycqa/pydocstyle
    rev: 6.3.0
    hooks:
      - id: pydocstyle
        args: ["--convention=google", "src/"]
        exclude: "^tools/"
        files: ^src/.*\.py$

  # Python Type checking
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.11.1
    hooks:
      - id: mypy
        args: ["--config-file", "pyproject.toml"]
        files: ^src/.*\.py$

  # Python Security scanning
  - repo: https://github.com/PyCQA/bandit
    rev: 1.7.9
    hooks:
      - id: bandit
        args: ["-r", "src/", "--skip", "B110,B404,B603,B607"]
        exclude: "tests/"
        pass_filenames: false
        files: ^src/.*\.py$

  # Python Code quality analysis
  - repo: https://github.com/pycqa/pylint
    rev: v3.2.6
    hooks:
      - id: pylint
        args: ["--rcfile", "pyproject.toml", "src/"]
        additional_dependencies: [toml]
        exclude: "^(tests/|tools/)"
        files: ^src/.*\.py$

  # Frontend TypeScript/React formatting and linting
  - repo: local
    hooks:
      - id: frontend-prettier
        name: Format frontend code with Prettier
        entry: bash -c "cd frontend && npm run format"
        language: system
        files: ^frontend/src/.*\.(ts|tsx|json|css|md)$
        pass_filenames: false

      - id: frontend-eslint
        name: Lint frontend code with ESLint
        entry: bash -c "cd frontend && npm run lint:fix"
        language: system
        files: ^frontend/src/.*\.(ts|tsx)$
        pass_filenames: false

      - id: frontend-typecheck
        name: TypeScript type checking
        entry: bash -c "cd frontend && npm run type-check"
        language: system
        files: ^frontend/src/.*\.(ts|tsx)$
        pass_filenames: false

  # Generic pre-commit hooks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v5.0.0
    hooks:
      - id: trailing-whitespace
        exclude: '^frontend/.*\.(md|json)$'
      - id: end-of-file-fixer
        exclude: '^frontend/.*\.(md|json)$'
      - id: check-yaml
      - id: check-toml
      - id: check-json
        exclude: '^frontend/(package-lock\.json|.*\.json)$'
      - id: check-merge-conflict
      - id: check-added-large-files
        args: ['--maxkb=1000']
      - id: check-case-conflict
      - id: check-docstring-first
        files: ^src/.*\.py$
      - id: debug-statements
        files: ^src/.*\.py$
      - id: name-tests-test
        args: ['--pytest-test-first']
        files: ^tests/.*\.py$

  # Python Complexity analysis
  - repo: local
    hooks:
      - id: radon-cc
        name: radon complexity check
        entry: bash -c "if command -v radon &> /dev/null; then radon cc -n D -s src/ || (echo 'Code complexity too high!' && exit 1); else echo 'Radon not found, skipping complexity check'; fi"
        language: system
        pass_filenames: false
        stages: [pre-commit]
        files: ^src/.*\.py$

      - id: radon-mi
        name: radon maintainability check
        entry: bash -c "if command -v radon &> /dev/null; then radon mi -n B -s src/ || (echo 'Maintainability index too low!' && exit 1); else echo 'Radon not found, skipping maintainability check'; fi"
        language: system
        pass_filenames: false
        stages: [pre-commit]
        files: ^src/.*\.py$

      # Auto-generate code atlas on commit
      - id: extract-schema
        name: extract code schema
        entry: .venv/bin/python tools/extract_schema.py
        language: system
        pass_filenames: false
        stages: [pre-commit]
        files: ^src/.*\.py$

  # Jupyter notebook support (if using notebooks)
  - repo: https://github.com/nbQA-dev/nbQA
    rev: 1.8.7
    hooks:
      - id: nbqa-black
        additional_dependencies: [black==24.8.0]
      - id: nbqa-isort
        additional_dependencies: [isort==5.13.2]
      - id: nbqa-flake8
        additional_dependencies: [flake8==7.1.0]

# Global configuration
default_stages: [pre-commit]
fail_fast: false
minimum_pre_commit_version: "3.0.0"

ci:
  autofix_commit_msg: |
    [pre-commit.ci] auto fixes from pre-commit hooks

    for more information, see https://pre-commit.ci
  autofix_prs: true
  autoupdate_branch: ''
  autoupdate_commit_msg: '[pre-commit.ci] pre-commit autoupdate'
  autoupdate_schedule: weekly
  skip: [radon-cc, radon-mi, extract-schema, render-graphs, frontend-prettier, frontend-eslint, frontend-typecheck]
  submodules: false
