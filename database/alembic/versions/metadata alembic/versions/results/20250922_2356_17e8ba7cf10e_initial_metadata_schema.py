"""Initial metadata schema

Revision ID: 17e8ba7cf10e
Revises:
Create Date: 2025-09-22 23:56:32.431554+00:00

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '17e8ba7cf10e'
down_revision = None
branch_labels = ('metadata',)
depends_on = None


def upgrade() -> None:
    """Upgrade to this revision."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('jobs',
    sa.Column('job_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('pipeline_version', sa.String(length=100), nullable=False),
    sa.Column('status', sa.String(length=20), nullable=False),
    sa.Column('input_signature', sa.String(length=64), nullable=True),
    sa.Column('job_metadata', postgresql.JSONB(astext_type=sa.Text()), server_default='{}', nullable=False),
    sa.Column('submitted_by', sa.UUID(), nullable=False),
    sa.Column('priority', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('started_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('completed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('error_details', postgresql.JSONB(astext_type=sa.Text()), server_default='{}', nullable=False),
    sa.PrimaryKeyConstraint('job_id', name=op.f('pk_jobs'))
    )
    op.create_table('organizations',
    sa.Column('org_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('status', sa.String(length=20), nullable=False),
    sa.Column('quotas', postgresql.JSONB(astext_type=sa.Text()), server_default='{}', nullable=False),
    sa.Column('settings', postgresql.JSONB(astext_type=sa.Text()), server_default='{}', nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('org_id', name=op.f('pk_organizations')),
    sa.UniqueConstraint('name', name=op.f('uq_organizations_name'))
    )
    op.create_table('users',
    sa.Column('user_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('enabled', sa.Boolean(), nullable=False),
    sa.Column('profile', postgresql.JSONB(astext_type=sa.Text()), server_default='{}', nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('last_login', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('user_id', name=op.f('pk_users')),
    sa.UniqueConstraint('email', name=op.f('uq_users_email'))
    )
    op.create_table('audit_logs',
    sa.Column('audit_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('org_id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('action', sa.String(length=100), nullable=False),
    sa.Column('entity_type', sa.String(length=50), nullable=False),
    sa.Column('entity_id', sa.String(length=100), nullable=False),
    sa.Column('details', postgresql.JSONB(astext_type=sa.Text()), server_default='{}', nullable=False),
    sa.Column('ip_address', sa.String(length=45), nullable=True),
    sa.Column('user_agent', sa.String(length=500), nullable=True),
    sa.Column('ts', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['org_id'], ['organizations.org_id'], name=op.f('fk_audit_logs_org_id_organizations'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], name=op.f('fk_audit_logs_user_id_users'), ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('audit_id', name=op.f('pk_audit_logs'))
    )
    op.create_table('docking_results',
    sa.Column('job_id', sa.UUID(), nullable=False),
    sa.Column('pose_rank', sa.Integer(), nullable=False),
    sa.Column('affinity', sa.Float(), nullable=False),
    sa.Column('rmsd_lb', sa.Float(), nullable=True),
    sa.Column('rmsd_ub', sa.Float(), nullable=True),
    sa.Column('pose_data', postgresql.JSONB(astext_type=sa.Text()), server_default='{}', nullable=False),
    sa.Column('confidence_score', sa.Float(), nullable=True),
    sa.ForeignKeyConstraint(['job_id'], ['jobs.job_id'], name=op.f('fk_docking_results_job_id_jobs'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('job_id', 'pose_rank', name=op.f('pk_docking_results'))
    )
    op.create_table('job_events',
    sa.Column('job_id', sa.UUID(), nullable=False),
    sa.Column('seq_no', sa.Integer(), nullable=False),
    sa.Column('event', sa.String(length=50), nullable=False),
    sa.Column('detail', sa.Text(), nullable=True),
    sa.Column('event_metadata', postgresql.JSONB(astext_type=sa.Text()), server_default='{}', nullable=False),
    sa.Column('ts', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['job_id'], ['jobs.job_id'], name=op.f('fk_job_events_job_id_jobs'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('job_id', 'seq_no', name=op.f('pk_job_events'))
    )
    op.create_table('job_inputs',
    sa.Column('job_id', sa.UUID(), nullable=False),
    sa.Column('key', sa.String(length=100), nullable=False),
    sa.Column('value', sa.Text(), nullable=False),
    sa.Column('input_type', sa.String(length=20), nullable=False),
    sa.Column('input_metadata', postgresql.JSONB(astext_type=sa.Text()), server_default='{}', nullable=False),
    sa.ForeignKeyConstraint(['job_id'], ['jobs.job_id'], name=op.f('fk_job_inputs_job_id_jobs'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('job_id', 'key', name=op.f('pk_job_inputs'))
    )
    op.create_table('job_outputs',
    sa.Column('job_id', sa.UUID(), nullable=False),
    sa.Column('key', sa.String(length=100), nullable=False),
    sa.Column('uri', sa.String(length=500), nullable=False),
    sa.Column('output_type', sa.String(length=20), nullable=False),
    sa.Column('content_type', sa.String(length=100), nullable=True),
    sa.Column('size_bytes', sa.Integer(), nullable=True),
    sa.Column('checksum', sa.String(length=64), nullable=True),
    sa.Column('output_metadata', postgresql.JSONB(astext_type=sa.Text()), server_default='{}', nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['job_id'], ['jobs.job_id'], name=op.f('fk_job_outputs_job_id_jobs'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('job_id', 'key', name=op.f('pk_job_outputs'))
    )
    op.create_table('memberships',
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('org_id', sa.UUID(), nullable=False),
    sa.Column('status', sa.String(length=20), nullable=False),
    sa.Column('member_metadata', postgresql.JSONB(astext_type=sa.Text()), server_default='{}', nullable=False),
    sa.Column('joined_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['org_id'], ['organizations.org_id'], name=op.f('fk_memberships_org_id_organizations'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], name=op.f('fk_memberships_user_id_users'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('user_id', 'org_id', name=op.f('pk_memberships'))
    )
    op.create_table('molecules',
    sa.Column('molecule_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('org_id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('format', sa.String(length=10), nullable=False),
    sa.Column('uri', sa.String(length=500), nullable=False),
    sa.Column('checksum', sa.String(length=64), nullable=True),
    sa.Column('size_bytes', sa.Integer(), nullable=True),
    sa.Column('properties', postgresql.JSONB(astext_type=sa.Text()), server_default='{}', nullable=False),
    sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), server_default='[]', nullable=False),
    sa.Column('uploaded_by', sa.UUID(), nullable=False),
    sa.Column('visibility', sa.String(length=20), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['org_id'], ['organizations.org_id'], name=op.f('fk_molecules_org_id_organizations'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['uploaded_by'], ['users.user_id'], name=op.f('fk_molecules_uploaded_by_users'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('molecule_id', name=op.f('pk_molecules'))
    )
    op.create_table('pipeline_templates',
    sa.Column('template_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('org_id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('display_name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('category', sa.String(length=50), nullable=False),
    sa.Column('workflow_definition', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('default_parameters', postgresql.JSONB(astext_type=sa.Text()), server_default='{}', nullable=False),
    sa.Column('is_public', sa.Boolean(), nullable=False),
    sa.Column('is_system', sa.Boolean(), nullable=False),
    sa.Column('version', sa.String(length=20), nullable=False),
    sa.Column('created_by', sa.UUID(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['created_by'], ['users.user_id'], name=op.f('fk_pipeline_templates_created_by_users'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['org_id'], ['organizations.org_id'], name=op.f('fk_pipeline_templates_org_id_organizations'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('template_id', name=op.f('pk_pipeline_templates'))
    )
    op.create_table('result_cache',
    sa.Column('cache_key', sa.String(length=64), nullable=False),
    sa.Column('job_id', sa.UUID(), nullable=False),
    sa.Column('pipeline_version', sa.String(length=100), nullable=False),
    sa.Column('task_name', sa.String(length=100), nullable=True),
    sa.Column('hit_count', sa.Integer(), nullable=False),
    sa.Column('confidence_score', sa.Float(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('last_used_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['job_id'], ['jobs.job_id'], name=op.f('fk_result_cache_job_id_jobs'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('cache_key', name=op.f('pk_result_cache'))
    )
    op.create_table('roles',
    sa.Column('role_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('org_id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['org_id'], ['organizations.org_id'], name=op.f('fk_roles_org_id_organizations'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('role_id', name=op.f('pk_roles'))
    )
    op.create_table('task_definitions',
    sa.Column('task_definition_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('org_id', sa.UUID(), nullable=False),
    sa.Column('task_id', sa.String(length=100), nullable=False),
    sa.Column('version', sa.String(length=20), nullable=False),
    sa.Column('task_metadata', postgresql.JSONB(astext_type=sa.Text()), server_default='{}', nullable=False),
    sa.Column('interface_spec', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('service_config', postgresql.JSONB(astext_type=sa.Text()), server_default='{}', nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_system', sa.Boolean(), nullable=False),
    sa.Column('created_by', sa.UUID(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['created_by'], ['users.user_id'], name=op.f('fk_task_definitions_created_by_users'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['org_id'], ['organizations.org_id'], name=op.f('fk_task_definitions_org_id_organizations'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('task_definition_id', name=op.f('pk_task_definitions'))
    )
    op.create_table('task_executions',
    sa.Column('exec_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('job_id', sa.UUID(), nullable=False),
    sa.Column('task_name', sa.String(length=100), nullable=False),
    sa.Column('task_definition_id', sa.String(length=100), nullable=True),
    sa.Column('service_url', sa.String(length=500), nullable=True),
    sa.Column('status', sa.String(length=20), nullable=False),
    sa.Column('parameters', postgresql.JSONB(astext_type=sa.Text()), server_default='{}', nullable=False),
    sa.Column('execution_metadata', postgresql.JSONB(astext_type=sa.Text()), server_default='{}', nullable=False),
    sa.Column('started_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('completed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('logs_uri', sa.String(length=500), nullable=True),
    sa.ForeignKeyConstraint(['job_id'], ['jobs.job_id'], name=op.f('fk_task_executions_job_id_jobs'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('exec_id', name=op.f('pk_task_executions'))
    )
    op.create_table('task_results',
    sa.Column('job_id', sa.UUID(), nullable=False),
    sa.Column('task_name', sa.String(length=100), nullable=False),
    sa.Column('result_data', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('schema_version', sa.String(length=20), nullable=False),
    sa.Column('confidence_score', sa.Float(), nullable=False),
    sa.Column('validation_errors', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('service_name', sa.String(length=100), nullable=False),
    sa.Column('service_version', sa.String(length=20), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['job_id'], ['jobs.job_id'], name=op.f('fk_task_results_job_id_jobs'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('job_id', 'task_name', name=op.f('pk_task_results'))
    )
    op.create_table('dynamic_task_results',
    sa.Column('result_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('exec_id', sa.UUID(), nullable=False),
    sa.Column('result_schema_version', sa.String(length=20), nullable=False),
    sa.Column('result_data', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('validation_errors', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('confidence_score', sa.Float(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['exec_id'], ['task_executions.exec_id'], name=op.f('fk_dynamic_task_results_exec_id_task_executions'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('result_id', name=op.f('pk_dynamic_task_results'))
    )
    op.create_table('membership_roles',
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('org_id', sa.UUID(), nullable=False),
    sa.Column('role_id', sa.UUID(), nullable=False),
    sa.Column('assigned_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['role_id'], ['roles.role_id'], name=op.f('fk_membership_roles_role_id_roles'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id', 'org_id'], ['memberships.user_id', 'memberships.org_id'], name=op.f('fk_membership_roles_user_id_memberships'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('user_id', 'org_id', 'role_id', name=op.f('pk_membership_roles'))
    )
    op.create_table('pipeline_task_steps',
    sa.Column('step_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('template_id', sa.UUID(), nullable=False),
    sa.Column('task_definition_id', sa.UUID(), nullable=False),
    sa.Column('step_name', sa.String(length=100), nullable=False),
    sa.Column('step_order', sa.Integer(), nullable=False),
    sa.Column('depends_on', postgresql.JSONB(astext_type=sa.Text()), server_default='[]', nullable=False),
    sa.Column('parameter_overrides', postgresql.JSONB(astext_type=sa.Text()), server_default='{}', nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['task_definition_id'], ['task_definitions.task_definition_id'], name=op.f('fk_pipeline_task_steps_task_definition_id_task_definitions'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['template_id'], ['pipeline_templates.template_id'], name=op.f('fk_pipeline_task_steps_template_id_pipeline_templates'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('step_id', name=op.f('pk_pipeline_task_steps'))
    )
    op.create_table('role_permissions',
    sa.Column('role_id', sa.UUID(), nullable=False),
    sa.Column('permission', sa.String(length=100), nullable=False),
    sa.ForeignKeyConstraint(['role_id'], ['roles.role_id'], name=op.f('fk_role_permissions_role_id_roles'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('role_id', 'permission', name=op.f('pk_role_permissions'))
    )
    op.create_table('task_services',
    sa.Column('service_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('task_definition_id', sa.UUID(), nullable=False),
    sa.Column('service_url', sa.String(length=500), nullable=False),
    sa.Column('pod_name', sa.String(length=200), nullable=True),
    sa.Column('node_name', sa.String(length=200), nullable=True),
    sa.Column('health_status', sa.String(length=20), nullable=False),
    sa.Column('last_health_check', sa.DateTime(timezone=True), nullable=True),
    sa.Column('resources_used', postgresql.JSONB(astext_type=sa.Text()), server_default='{}', nullable=False),
    sa.Column('started_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['task_definition_id'], ['task_definitions.task_definition_id'], name=op.f('fk_task_services_task_definition_id_task_definitions'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('service_id', name=op.f('pk_task_services'))
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade from this revision."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('task_services')
    op.drop_table('role_permissions')
    op.drop_table('pipeline_task_steps')
    op.drop_table('membership_roles')
    op.drop_table('dynamic_task_results')
    op.drop_table('task_results')
    op.drop_table('task_executions')
    op.drop_table('task_definitions')
    op.drop_table('roles')
    op.drop_table('result_cache')
    op.drop_table('pipeline_templates')
    op.drop_table('molecules')
    op.drop_table('memberships')
    op.drop_table('job_outputs')
    op.drop_table('job_inputs')
    op.drop_table('job_events')
    op.drop_table('docking_results')
    op.drop_table('audit_logs')
    op.drop_table('users')
    op.drop_table('organizations')
    op.drop_table('jobs')
    # ### end Alembic commands ###
